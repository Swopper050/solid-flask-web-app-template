import { JSXElement, Show } from 'solid-js'
import { disable2FA } from '../../api'
import { clsx } from 'clsx'
import { useUser } from '../../context'

import {
  required,
  pattern,
  createForm,
  clearResponse,
  reset,
  setResponse,
  SubmitHandler,
} from '@modular-forms/solid'

import { Modal, ModalBaseProps } from '../../components/Modal'
import { TextInput } from '../../components/TextInput'

type TotpFormData = {
  totpCode: string
}

export function Disable2FAModal(props: ModalBaseProps): JSXElement {
  const { fetchUser } = useUser()

  const [totpForm, Totp] = createForm<TotpFormData>()

  const onDisable2FA: SubmitHandler<TotpFormData> = async (values) => {
    const response = await disable2FA(values.totpCode)

    if (response.status !== 200) {
      setResponse(totpForm, {
        status: 'error',
        message: (await response.json()).error_message,
      })
      return
    }

    await fetchUser()
    setResponse(totpForm, { status: 'success' })

    onClose()
    props.onClose()
  }

  const onClose = () => {
    clearResponse(totpForm)
    reset(totpForm)
  }

  return (
    <Modal title="Disable 2FA" isOpen={props.isOpen} onClose={props.onClose}>
      <div>
        <p class="py-4">
          Enter the 6-digit code generated by your authenticator app.
        </p>

        <Totp.Form onSubmit={onDisable2FA}>
          <Totp.Field
            name="totpCode"
            validate={[
              required('Please enter a 6-digit code'),
              pattern(/^[0-9]{6}$/, 'Please enter a valid 6-digit code'),
            ]}
          >
            {(field, props) => (
              <TextInput
                {...props}
                type="text"
                value={field.value}
                error={field.error}
                icon={<i class="fa-solid fa-hashtag" />}
              />
            )}
          </Totp.Field>

          <Show when={totpForm.response.status === 'error'}>
            <div role="alert" class="alert alert-error my-4">
              <i class="fa-solid fa-circle-exclamation" />
              <span>{totpForm.response.message}</span>
            </div>
          </Show>

          <div class="modal-action">
            <button
              class={clsx(
                'btn btn-primary',
                totpForm.submitting && 'btn-disabled'
              )}
              type="submit"
            >
              <Show when={totpForm.submitting} fallback="Disable 2FA">
                Disabling
                <span class="loading loading-spinner" />
              </Show>
            </button>
          </div>
        </Totp.Form>
      </div>
    </Modal>
  )
}
